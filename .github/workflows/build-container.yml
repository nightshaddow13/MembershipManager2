name: Build Container
permissions:
  packages: write
  contents: write
on:
  workflow_run:
    workflows: ["Build"]
    types:
      - completed
    branches:
      - main
      - master
      - 48-update-deployment-pipeline
  workflow_dispatch:

# Only update envs here if you need to change them for this workflow
env:
  DOCKER_BUILDKIT: 1
  KAMAL_REGISTRY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
  KAMAL_REGISTRY_USERNAME: ${{ github.actor }}

jobs:
  build-container:
    runs-on: ubuntu-latest
    # todo: dont forget to set this back!
    if: ${{ github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Extract version from Git tag
        id: extract_version
        run: |
          VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.1.0")
          VERSION=${VERSION#v}
          SHORT_SHA=${GITHUB_SHA::7}
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "SHORT_SHA=$SHORT_SHA" >> $GITHUB_ENV
          echo "Extracted version: $VERSION"
          echo "Using short SHA for Docker tag: $SHORT_SHA"

      - name: Set up environment variables
        run: |
          echo "image_repository_name=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          echo "repository_name=$(echo ${{ github.repository }} | cut -d '/' -f 2)" >> $GITHUB_ENV
          echo "repository_name_lower=$(echo ${{ github.repository }} | cut -d '/' -f 2 | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          echo "org_name=$(echo ${{ github.repository }} | cut -d '/' -f 1)" >> $GITHUB_ENV

      # This step is for the deployment of the templates only, safe to delete
      - name: Modify csproj for template deploy
        env:
          KAMAL_DEPLOY_IP: ${{ secrets.KAMAL_DEPLOY_IP }}
        if: env.KAMAL_DEPLOY_IP != null
        run: |
          sed -i 's#<ContainerLabel Include="service" Value="membership-manager" />#<ContainerLabel Include="service" Value="${{ env.repository_name_lower }}" />#g' MembershipManager/MembershipManager.csproj

      - name: Check for Client directory and package.json
        id: check_client
        run: |
          if [ -d "MembershipManager.Client" ] && [ -f "MembershipManager.Client/package.json" ]; then
            echo "client_exists=true" >> $GITHUB_OUTPUT
          else
            echo "client_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup Node.js
        if: steps.check_client.outputs.client_exists == 'true'
        uses: actions/setup-node@v3
        with:
          node-version: 22

      - name: Install npm dependencies
        if: steps.check_client.outputs.client_exists == 'true'
        working-directory: ./MembershipManager.Client
        run: npm install

      - name: Install x tool
        run: dotnet tool install -g x

      - name: Apply Production AppSettings
        env:
          APPSETTINGS_PATCH: ${{ secrets.APPSETTINGS_PATCH }}
        if: env.APPSETTINGS_PATCH != null
        working-directory: ./MembershipManager
        run: |
          cat <<EOF >> appsettings.json.patch
          ${{ secrets.APPSETTINGS_PATCH }}
          EOF
          x patch appsettings.json.patch

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ env.KAMAL_REGISTRY_USERNAME }}
          password: ${{ env.KAMAL_REGISTRY_PASSWORD }}

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "8.0"

      - name: Build and push Docker image
        run: |
          dotnet publish --os linux --arch x64 -c Release \
            -p:ContainerRepository=${{ env.image_repository_name }} \
            -p:ContainerRegistry=ghcr.io \
            -p:ContainerImageTags=${{ env.SHORT_SHA }} \
            -p:ContainerPort=80

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Update Azure App Service to use new image tag
        run: |
          az webapp config container set \
            --name wa-mmbrshpmngr-02 \
            --resource-group rg-mmbrshpmngr \
            --docker-custom-image-name ghcr.io/${{ env.image_repository_name }}:${{ env.SHORT_SHA }}
